/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-ImageMagick.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : ImageMagick
 #	author : miyako
 #	2020/06/15
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-ImageMagick.h"

std::mutex mutexObjects;

std::map<uint32_t, IMImage2 *> mapObjects;

IMImage2 *_objectCreate(uint32_t *index) {
    
    std::lock_guard<std::mutex> lock(mutexObjects);
    
    IMImage2 *obj = new(IMImage2);
    
    uint32_t i = 1;
    
    while (mapObjects.find(i) != mapObjects.end()) {
        i++;
    }
    
    mapObjects.insert(std::map<uint32_t, IMImage2*>::value_type(i, obj));
    
    *index = i;
    
    return obj;
}

void _objectDelete(uint32_t i) {
    
    std::lock_guard<std::mutex> lock(mutexObjects);
    
    std::map<uint32_t, IMImage2*>::iterator pos = mapObjects.find(i);
    
    if(pos != mapObjects.end()) {
        delete pos->second;
        mapObjects.erase(pos);
    }
}

void _objectDeleteAll() {
    
    std::lock_guard<std::mutex> lock(mutexObjects);
    
    std::map<uint32_t, IMImage2*>::iterator it = mapObjects.begin();
    
    while (it != mapObjects.end()) {
       
        delete it->second;
        
        it++;
    }
    
    mapObjects.clear();
}

IMImage2 *_objectGet(uint32_t i) {
    
    std::lock_guard<std::mutex> lock(mutexObjects);
    
    IMImage2 *obj = NULL;
    
    std::map<uint32_t, IMImage2*>::iterator pos = mapObjects.find(i);
    
    if(pos != mapObjects.end()) {
        obj = pos->second;
    }
    
    return obj;
}

#pragma mark -

void OnStartup() {
    
#if VERSIONWIN
    
    wchar_t thisPath[_MAX_PATH] = { 0 };
    HMODULE hplugin = GetModuleHandleW(L"ImageMagick.4DX");
    GetModuleFileNameW(hplugin, thisPath, _MAX_PATH);
    
    wchar_t fDrive[_MAX_DRIVE], fDir[_MAX_DIR], fName[_MAX_FNAME], fExt[_MAX_EXT];
    _wsplitpath_s(thisPath, fDrive, fDir, fName, fExt);
    
    wchar_t    folder_path[_MAX_PATH] = { 0 };
    _wmakepath_s(folder_path, fDrive, fDir, NULL, NULL);
    
    //remove the directory separator
    std::wstring MAGICK_GHOSTSCRIPT_PATH = folder_path;
    MAGICK_GHOSTSCRIPT_PATH.pop_back();
    _wputenv_s(L"MAGICK_GHOSTSCRIPT_PATH", MAGICK_GHOSTSCRIPT_PATH.c_str());
    SetEnvironmentVariable(L"MAGICK_GHOSTSCRIPT_PATH", MAGICK_GHOSTSCRIPT_PATH.c_str());
    
    const char *path = 0;
    C_TEXT t;
    t.setUTF16String((const PA_Unichar *)thisPath.c_str(), thisPath.length());
    CUTF8String u8;
    t.copyUTF8String(&u8);
    path = (const char *)u8.c_str();
    Magick::InitializeMagick(path);
    
#else
    
    const char *path = 0;
    NSBundle *thisBundle = [NSBundle bundleWithIdentifier:@"com.4D.ImageMagick"];
    if(thisBundle){
                
        /*
         * path to the gs installation; only windows but do it anyway
         */
        
         NSString *MAGICK_GHOSTSCRIPT_PATH = [[thisBundle executablePath]stringByDeletingLastPathComponent];
         setenv("MAGICK_GHOSTSCRIPT_PATH", [MAGICK_GHOSTSCRIPT_PATH UTF8String], 0);
        
        /*
         * no effect;

         NSString *MAGICK_HOME = [[thisBundle executablePath]stringByDeletingLastPathComponent];
         setenv("MAGICK_HOME", [MAGICK_HOME UTF8String], 0);
         
         NSString *MAGICK_CODER_MODULE_PATH = [[thisBundle executablePath]stringByDeletingLastPathComponent];
         setenv("MAGICK_CODER_MODULE_PATH", [MAGICK_CODER_MODULE_PATH UTF8String], 0);
         
         */

        path = [[thisBundle executablePath]UTF8String];
        Magick::InitializeMagick(path);
    }
#endif
    
    MagickCore::MagickCoreGenesis(path, MagickCore::MagickFalse);
}

void OnExit() {
    
    _objectDeleteAll();
    
    MagickCore::MagickCoreTerminus();
}

#pragma mark -
     
void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
            case kInitPlugin :
            case kServerInitPlugin :
                OnStartup();
                break;
                
            case kDeinitPlugin :
                OnExit();
                break;
                
			// --- ImageMagick
            
			case 1 :
				IM_New_Object(params);
				break;
			case 2 :
				IM_Clear_Object(params);
				break;
			case 3 :
				IM_Copy(params);
				break;
			case 4 :
				IM_Create(params);
				break;
			case 5 :
				IM_Open_File(params);
				break;
			case 6 :
				IM_Save_File(params);
				break;
			case 7 :
				IM_Get_Image_Properties(params);
				break;
			case 8 :
				IM_Set_Image_Properties(params);
				break;
			case 9 :
				IM_Modify_Image(params);
				break;
			case 10 :
				IM_Open_Blob(params);
				break;
			case 11 :
				IM_Save_Blob(params);
				break;
			case 12 :
				IM_Draw(params);
				break;
			case 13 :
				IM_Get_Last_Error(params);
				break;
			case 14 :
				IM_Get_Format_List(params);
				break;

        }

	}
	catch(...)
	{

	}
}

#pragma mark -

void IM_New_Object(PA_PluginParameters params) {
    
    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    
    C_LONGINT returnValue;
    
    unsigned int i = 0;
    
    _objectCreate(&i);
    
    returnValue.setIntValue(i);
    returnValue.setReturn(pResult);
}

void IM_Clear_Object(PA_PluginParameters params) {
    
    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT Param1;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    if(_objectGet(Param1.getIntValue()))
    {
        _objectDelete(Param1.getIntValue());
    }else{
        returnValue.setIntValue(ImageMagickErrorUnknownObject);
    }
    
    returnValue.setReturn(pResult);
}

void IM_Copy(PA_PluginParameters params) {
    
    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT Param1;
    C_LONGINT Param2;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    
    IMImage2 *newImage = _objectGet(Param1.getIntValue());
    IMImage2 *oldImage = _objectGet(Param2.getIntValue());
    
    if((newImage) && (oldImage))
    {
        *newImage = *oldImage;
    }else{
        returnValue.setIntValue(ImageMagickErrorUnknownObject);
    }
    
    returnValue.setReturn(pResult);
}

void IM_Create(PA_PluginParameters params) {
    
    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT Param1;
    C_LONGINT Param2;
    C_LONGINT Param3;
    C_TEXT Param4;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    Param3.fromParamAtIndex(pParams, 3);
    Param4.fromParamAtIndex(pParams, 4);
    
    IMImage2 *newImage = _objectGet(Param1.getIntValue());
    
    if(newImage)
    {
        returnValue.setIntValue(newImage->create(Param2.getIntValue(),
                                                 Param3.getIntValue(),
                                                 Param4));
    }else{
        returnValue.setIntValue(ImageMagickErrorUnknownObject);
    }
    
    returnValue.setReturn(pResult);
}

void IM_Open_File(PA_PluginParameters params) {
    
    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT Param1;
    C_TEXT Param2;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    
#if VERSIONMAC
    Param2.convertPath();
#endif
    
    IMImage2 *newImage = _objectGet(Param1.getIntValue());
    
    if(newImage)
    {
        returnValue.setIntValue(newImage->read(Param2));
    }else{
        returnValue.setIntValue(ImageMagickErrorUnknownObject);
    }
    
    returnValue.setReturn(pResult);
}

void IM_Save_File(PA_PluginParameters params) {
    
    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT Param1;
    C_TEXT Param2;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    
#if VERSIONMAC
    Param2.convertPath();
#endif
    
    IMImage2 *newImage = _objectGet(Param1.getIntValue());
    
    if(newImage)
    {
        returnValue.setIntValue(newImage->write(Param2));
    }else{
        returnValue.setIntValue(ImageMagickErrorUnknownObject);
    }
    
    returnValue.setReturn(pResult);
}

void IM_Get_Image_Properties(PA_PluginParameters params) {
    
    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT Param1;
    C_LONGINT Param2;
    C_TEXT Param3;
    C_REAL Param4;
    C_REAL Param5;
    C_REAL Param6;
    C_REAL Param7;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    
    IMImage2 *newImage = _objectGet(Param1.getIntValue());
    
    if(newImage)
    {
        double para1, para2, para3, para4;
        para1 = para2 = para3 = para4 = 0;
        
        returnValue.setIntValue(newImage->GetProperty(Param2.getIntValue(),
                                                      Param3,
                                                      para1,
                                                      para2,
                                                      para3,
                                                      para4));
        
        if(!returnValue.getIntValue())
        {
            Param4.setDoubleValue(para1);
            Param5.setDoubleValue(para2);
            Param6.setDoubleValue(para3);
            Param7.setDoubleValue(para4);
        }
        
    }else{
        returnValue.setIntValue(ImageMagickErrorUnknownObject);
    }
    
    Param3.toParamAtIndex(pParams, 3);
    Param4.toParamAtIndex(pParams, 4);
    Param5.toParamAtIndex(pParams, 5);
    Param6.toParamAtIndex(pParams, 6);
    Param7.toParamAtIndex(pParams, 7);
    
    returnValue.setReturn(pResult);
}

void IM_Set_Image_Properties(PA_PluginParameters params) {
    
    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT Param1;
    C_LONGINT Param2;
    C_TEXT Param3;
    C_REAL Param4;
    C_REAL Param5;
    C_REAL Param6;
    C_REAL Param7;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    Param3.fromParamAtIndex(pParams, 3);
    Param4.fromParamAtIndex(pParams, 4);
    Param5.fromParamAtIndex(pParams, 5);
    Param6.fromParamAtIndex(pParams, 6);
    Param7.fromParamAtIndex(pParams, 7);
    
    IMImage2 *newImage = _objectGet(Param1.getIntValue());
    
    if(newImage)
    {
        returnValue.setIntValue(newImage->SetProperty(Param2.getIntValue(),
                                                      Param3,
                                                      Param4.getDoubleValue(),
                                                      Param5.getDoubleValue(),
                                                      Param6.getDoubleValue(),
                                                      Param7.getDoubleValue()));
    }else{
        returnValue.setIntValue(ImageMagickErrorUnknownObject);
    }
    
    returnValue.setReturn(pResult);
}

void IM_Modify_Image(PA_PluginParameters params) {
    
    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT Param1;
    C_LONGINT Param2;
    C_TEXT Param3;
    C_REAL Param4;
    C_REAL Param5;
    C_REAL Param6;
    C_REAL Param7;
    C_REAL Param8;
    C_REAL Param9;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    Param3.fromParamAtIndex(pParams, 3);
    Param4.fromParamAtIndex(pParams, 4);
    Param5.fromParamAtIndex(pParams, 5);
    Param6.fromParamAtIndex(pParams, 6);
    Param7.fromParamAtIndex(pParams, 7);
    Param8.fromParamAtIndex(pParams, 8);
    Param9.fromParamAtIndex(pParams, 9);
    
    IMImage2 *newImage = _objectGet(Param1.getIntValue());
    
    if(newImage)
    {
        returnValue.setIntValue(newImage->ModifyImage(Param2.getIntValue(),
                                                      Param3,
                                                      Param4.getDoubleValue(),
                                                      Param5.getDoubleValue(),
                                                      Param6.getDoubleValue(),
                                                      Param7.getDoubleValue(),
                                                      Param8.getDoubleValue(),
                                                      Param9.getDoubleValue()));
    }else{
        returnValue.setIntValue(ImageMagickErrorUnknownObject);
    }
    
    returnValue.setReturn(pResult);
}

void IM_Open_Blob(PA_PluginParameters params) {
    
    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT Param1;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    IMImage2 *newImage = _objectGet(Param1.getIntValue());
    
    if(newImage)
    {
        PA_Handle h = *(PA_Handle *)(pParams[1]);
        if(h)
        {
            returnValue.setIntValue(newImage->read(PA_LockHandle(h), PA_GetHandleSize(h)));
            PA_UnlockHandle(h);
        }
    }else{
        returnValue.setIntValue(ImageMagickErrorUnknownObject);
    }
    returnValue.setReturn(pResult);
}

void IM_Save_Blob(PA_PluginParameters params) {
    
    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT Param1;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    IMImage2 *newImage = _objectGet(Param1.getIntValue());
    
    if(newImage)
    {
        returnValue.setIntValue(newImage->write(params, 2));
    }else{
        returnValue.setIntValue(ImageMagickErrorUnknownObject);
    }
    
    returnValue.setReturn(pResult);
}

void IM_Draw(PA_PluginParameters params) {
    
    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_LONGINT Param1;
    C_LONGINT Param2;
    C_TEXT Param3;
    C_REAL Param4;
    C_REAL Param5;
    C_REAL Param6;
    C_REAL Param7;
    C_REAL Param8;
    C_REAL Param9;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    Param3.fromParamAtIndex(pParams, 3);
    Param4.fromParamAtIndex(pParams, 4);
    Param5.fromParamAtIndex(pParams, 5);
    Param6.fromParamAtIndex(pParams, 6);
    Param7.fromParamAtIndex(pParams, 7);
    Param8.fromParamAtIndex(pParams, 8);
    Param9.fromParamAtIndex(pParams, 9);
    
    IMImage2 *newImage = _objectGet(Param1.getIntValue());
    
    if(newImage)
    {
        returnValue.setIntValue(newImage->Draw(Param2.getIntValue(),
                                               Param3,
                                               Param4.getDoubleValue(),
                                               Param5.getDoubleValue(),
                                               Param6.getDoubleValue(),
                                               Param7.getDoubleValue(),
                                               Param8.getDoubleValue(),
                                               Param9.getDoubleValue()));
    }else{
        returnValue.setIntValue(ImageMagickErrorUnknownObject);
    }
    
    returnValue.setReturn(pResult);
}

void IM_Get_Last_Error(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
 
    C_LONGINT Param1;
    C_TEXT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    
    IMImage2 *newImage = _objectGet(Param1.getIntValue());
    
    if(newImage)
        newImage->GetLastError(returnValue);
    
    returnValue.setReturn(pResult);
}

void IM_Get_Format_List(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    ARRAY_TEXT Param1;
    C_LONGINT returnValue;
    
    Param1.fromParamAtIndex(pParams, 1);
    Param1.setSize(1);
    
    std::list<Magick::CoderInfo> coderList;
    
    Magick::coderInfoList( &coderList,                // Reference to output list
                          Magick::CoderInfo::TrueMatch,        // Match readable formats
                          Magick::CoderInfo::AnyMatch,        // Don't care about writable formats
                          Magick::CoderInfo::AnyMatch);        // Don't care about multi-frame support
    
    std::list<Magick::CoderInfo>::iterator entry = coderList.begin();
    
    std::string formatdesc;
    
    while(entry != coderList.end())
    {
        formatdesc = entry->name() + " (" + entry->description() + ") ";
        
        if (entry->isReadable())
            formatdesc += "r";
        else
            formatdesc += " ";
        if (entry->isWritable())
            formatdesc += "w";
        else
            formatdesc += " ";
        if (entry->isMultiFrame())
            formatdesc += "m";
        else
            formatdesc += " ";
        
        Param1.appendUTF8String((const uint8_t *)formatdesc.c_str(), (uint32_t)formatdesc.size());
        
        entry ++;
    }
    
    Param1.toParamAtIndex(pParams, 1);
    returnValue.setReturn(pResult);
}
